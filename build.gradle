buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'maven'
apply plugin: 'maven-publish'

project.ext {
    major = "0"
    minor = "2"
    mcVersion = "1.7.10"
}

version = "${project.ext.major}.${project.minor}"
group= "se.hagiz.minecraft.torchmod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "torchmod"

//if (System.getenv().BUILD_NUMBER != null) {
//    version += "-${System.getenv().BUILD_NUMBER}"
//} else {
//    version += "-err"
//}

minecraft {
    version = "1.7.10-10.13.2.1230"
    runDir = "eclipse/assets"

    // replacing stuff in the source
    replace '@VERSION@', "${project.ext.major}.${project.minor}"
    replace '@MC_VERSION@', version
//    if (System.getenv("BUILD_NUMBER") != null) {
//        replace '@BUILD_NUMBER@', System.getenv("BUILD_NUMBER")
//    } else {
//        replace '@BUILD_NUMBER@', 0
//    }
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include '*.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    //This makes sure that it gets run EVERY time
    outputs.upToDateWhen {false}
}

jar {
    appendix = "${project.ext.mcVersion}"
    classifier = "universal"
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output) {
        appendix = "${project.ext.mcVersion}"
        classifier = "deobf"
    }
}

task sourceJar(type: Jar) {
    from (sourceSets.main.allSource) {
        appendix = "${project.ext.mcVersion}"
        classifier = "src"
    }
}
